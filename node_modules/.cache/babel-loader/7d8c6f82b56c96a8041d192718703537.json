{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = _interopDefault(require('react'));\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar globalPrefix = 'id';\nvar lastId = 0;\n\nfunction nextId(localPrefix) {\n  lastId++;\n  return '' + (localPrefix || globalPrefix) + lastId;\n}\n/*\n  put it on root of the app to reset id on each app render.\n  (otherwise server would keep increasing it with each request\n  and cause client-server markup mismatch)\n*/\n\n\nvar ResetHtmlIdGenerator = function (_React$Component) {\n  _inherits(ResetHtmlIdGenerator, _React$Component);\n\n  function ResetHtmlIdGenerator(props) {\n    _classCallCheck(this, ResetHtmlIdGenerator);\n\n    var _this = _possibleConstructorReturn(this, (ResetHtmlIdGenerator.__proto__ || Object.getPrototypeOf(ResetHtmlIdGenerator)).call(this, props));\n\n    lastId = 0;\n\n    if (props.prefix) {\n      if (typeof props.prefix !== 'string') throw new Error('prefix should be of string type');\n      globalPrefix = props.prefix;\n    }\n\n    return _this;\n  }\n\n  _createClass(ResetHtmlIdGenerator, [{\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return ResetHtmlIdGenerator;\n}(React.Component);\n\nexports.default = nextId;\nexports.ResetHtmlIdGenerator = ResetHtmlIdGenerator;","map":null,"metadata":{},"sourceType":"script"}